package com.sudoku.imgprocess;
import java.util.ArrayList;
import org.opencv.core.Mat;
import org.opencv.core.CvType;

public class Decision {
	private ArrayList<double[]> means;
	private Mat sampleFeatures;
	
	public Decision(Sample sample){
		FeatureExtractor fe = new FeatureExtractor(sample);
		means = new ArrayList<double[]>();
		sampleFeatures = fe.getFeatures();
		//Mat one = Mat.zeros(1,26, CvType.CV_32F);
		double one[] = {0,0,0,0,0.76666671,0,0.90000004,0.30000001,0.73333335,0.90000004,0.4666667,0.16666667,0.20000002,0,0.40000004,0.56666672,0.43333337,38.733334,11.666667,30.766668,70.400002,74.966667,78.53334,43.76667,47.933334,76.76667};
		double two[] = {0.06666667, 0, 0.06666667, 0.033333335, 1, 0.23333335, 1, 0.033333335, 0.33333334, 0.4666667, 0.40000004, 0.06666667, 0.36666667, 0.33333334, 0.4666667, 0.73333335, 0.16666667, 69.53334, 22.366669, 83.666672, 99.300003, 90.900002, 125.96667, 80.233337, 94.666672, 94.166672};
		double[] three = {0.06666667, 0, 0, 0, 0.9666667, 0.73333335, 1, 0, 0.33333334, 0.40000004, 0.40000004, 0.033333335, 0.40000004, 0.83333337, 0.33333334, 0.40000004, 0.43333337, 62.166672, 23.333334, 80.733337, 102.7, 108.3, 100.9, 74.900002, 111.3, 99.833336};
		double[] four = {0.033333335, 0.83333337, 0.10000001, 0.13333334, 0.40000004, 0.5, 0.9333334, 0.36666667, 0.13333334, 0.70000005, 0.33333334, 0.53333336, 0.53333336, 0.23333335, 0.33333334, 0.33333334, 0.30000001, 2.7333336, 79.200005, 36.033337, 80.03334, 160.53334, 87.966675, 61.633335, 81.400002, 91.333336};
		double[] five = {0, 0, 0, 0, 0.9666667, 0.9666667, 1, 0, 0.40000004, 0.4666667, 0.36666667, 0.56666672, 0.73333335, 0.76666671, 0.66666669, 0.66666669, 0.83333337, 54.666668, 61.733337, 77.900002, 99.100006, 101.10001, 103.46667, 77.633339, 92.233337, 95.600006};
		double[] six = {0.033333335, 0, 0.13333334, 0.033333335, 0.83333337, 0.86666673, 1, 0.033333335, 0.4666667, 0.60000002, 0.36666667, 0.53333336, 0.73333335, 0.53333336, 0.56666672, 0.5, 0.53333336, 35.866669, 83.03334, 71.433334, 109.43334, 121.86668, 117.10001, 72.600006, 101.13334, 104.26667};
		double[] seven = {0, 0, 0, 0, 0.9666667, 0.033333335, 0.63333338, 0.36666667, 0.53333336, 0.73333335, 0.86666673, 0.033333335, 0.73333335, 0.73333335, 0.66666669, 0.76666671, 0.16666667, 77.466667, 5.8000002, 50.066669, 94.800003, 102.83334, 97.53334, 104.26667, 56.000004, 5.7666669};
		double[] eight = {0.90000004, 0, 0.9333334, 0.86666673, 0.9666667, 0.76666671, 1, 0.10000001, 0.5, 0.60000002, 0.5, 0.60000002, 0.66666669, 0.76666671, 0.43333337, 0.40000004, 0.5, 56.800003, 94.166672, 81.700005, 110.63334, 119.33334, 111.96667, 86.400002, 120.3, 107.50001};
		double[] nine = {0.60000002, 0.33333334, 0.70000005, 0.70000005, 1, 0.80000007, 0.86666673, 0, 0.4666667, 0.53333336, 0.5, 0.5, 0.53333336, 0.63333338, 0.5, 0.60000002, 0.73333335, 63.133335, 85.600006, 58.300003, 110.03334, 111.8, 122.46667, 81.03334, 110.73334, 71.26667};
		means.add(one);
		means.add(two);
		means.add(three);
		means.add(four);
		means.add(five);
		means.add(six);
		means.add(seven);
		means.add(eight);
		means.add(nine);
	}
	
	// Decision on density zone
	double euclidianDistance(double[] m1, Mat m2){
	    double d=0;
	    for(int i=17;i<m2.cols();i++){
	        d+= Math.pow(m2.get(0,i)[0]-m1[i],2);
	    }
	    return Math.sqrt(d);
	}

	int ppv(){
	    int idx =0;
	    double dist = 1000;
	    for(int i=0;i<means.size();i++){
	        double[] mean = means.get(i);
	        double d = euclidianDistance(mean,sampleFeatures);
	        if(d<dist){
	            idx=i;
	            dist=d;
	        }
	    }
	    return idx+1;
	}

	int[] vote(){
		int[] v = {0,0,0,0,0,0,0,0,0};
	    for(int i=0; i<sampleFeatures.cols()-9; i++){
	        double x = sampleFeatures.get(0,i)[0];
	        for(int k=0; k<means.size();k++){
	            double[] probas = means.get(k);
	            double p = probas[i];
	            int power=1;
	            if(i<4){
	                power=2;
	            }
	            if(x==1){
	                power=2*power;
	                if(p>0.7){
	                    v[k]=v[k]+power;
	                }
	            }
	            else{
	                if((1-p)>0.3){
	                    v[k]=v[k]+power;
	                }
	            }
	        }
	    }
	    return v;
	}


	public int getDecision(){
	    int[] v = vote();
	    int p = ppv();
	    v[p-1]= v[p-1]+8;
	    int k=0;
	    for(int i=0; i<v.length; i++){
	        if(v[i]>v[k]){
	            k=i;
	        }
	    }
	    //return p;
	    return k+1;
	}
}
